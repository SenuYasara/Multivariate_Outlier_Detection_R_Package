?prcomp
X <- matrix(rnorm(32000), 1000, 32)
Z <- X %*% C  ## ==>  cov(Z) ~=  C'C = S
X <- matrix(rnorm(32000), 1000, 32)
Z <- X %*% C
setwd("C:/Users/Senu/Desktop/Tri 2 2025/STAT 432 - Computational Statistics/w5")
x <- read.csv("D2.xls")
library(readxl)
x <- read_excel("D2.xls")
x
return(term_to_max)
profile <- function(mu,x){
term_to_max <- sum(abs(x-mu))
return(term_to_max)
}
optim(1,profile,x=x,lower = -Inf,upper = Inf)
library(readxl)
x <- read_excel("D2.xls")
profile <- function(mu,x){
term_to_max <- sum(abs(x-mu))
return(term_to_max)
}
optim(1,profile,x=x,lower = -Inf,upper = Inf)
x <- read_excel("D2.xls",sheet = "data")
x <- read_excel("D2.xls")
profile <- function(mu,x){
term_to_max <- sum(abs(x-mu))
return(term_to_max)
}
optim(1,profile,x=x,lower = -Inf,upper = Inf)
library(readxl)
x <- read_excel("D2.xls")
x <- unlist(x, use.names = FALSE)
x
profile <- function(mu,x){
term_to_max <- sum(abs(x-mu))
return(term_to_max)
}
optim(1,profile,x=x,lower = -Inf,upper = Inf)
##################################################
library(readxl)
# Read as numeric vector (not a tibble/data frame)
x <- read_excel("D2.xls")
x <- unlist(x, use.names = FALSE)   # or: x <- x[[1]]
# L1 loss (sum of absolute deviations) â†’ median
f <- function(mu) sum(abs(x - mu), na.rm = TRUE)
# Prefer 1-D Brent or optimize()
opt <- optimize(f, interval = range(x, na.rm = TRUE))  # returns minimum
mu_hat <- opt$minimum
mu_hat
# This should match: median(x, na.rm = TRUE)
median(x, na.rm = TRUE)
# Q2
library(readxl)
# Profile likelihood - Tutorial
# Q1
library(readxl)
x <- read_excel("D1.xls")
x <- unlist(x, use.names = FALSE)
profile <- function(mu,x){
term_to_max <- sum(abs(x-mu))
return(term_to_max)
}
optim(1,profile,x=x,lower = -Inf,upper = Inf) # 40.5
mu_hat <- opt$minimu
mu_hat
library(readxl)
x <- read_excel("D1.xls")
x <- unlist(x, use.names = FALSE)
profile <- function(mu,x){
term_to_max <- sum(abs(x-mu))
return(term_to_max)
}
optim(1,profile,x=x,lower = -Inf,upper = Inf)
mu_hat <- opt$minimu
mu_hat
opt <- optim(1,profile,x=x,lower = -Inf,upper = Inf)
opt$par
##################################################
# Q2
library(readxl)
x <- read_excel("D2.xls")
x <- unlist(x, use.names = FALSE)
x
##################################################
# Q2
library(readxl)
# data: one numeric column, x > 0
x <- read_excel("D2.xls") |> unlist(use.names = FALSE)
x <- x[is.finite(x) & x > 0]
n <- length(x)
x
n
# profile log-likelihood
ll_prof <- function(theta, x) {
p <- theta[1]; d <- theta[2]
if (p <= 0 || d <= 0) return(-Inf)
Slogx <- sum(log(x))
Sxp   <- sum(x^p)
# log(a_hat^p) = log(p * Sxp / (n * d))
log_ap <- log(p * Sxp) - log(n * d)
# profile log-likelihood (uses lgamma for stability)
n*log(p) - (n*d/p)*log_ap - n*lgamma(d/p) + (d - 1)*Slogx - n*d/p
}
# we minimize the negative log-likelihood
neg_ll_prof <- function(theta, x) -ll_prof(theta, x)
# optimize over p,d > 0
fit <- optim(
par = c(p = 1, d = 1),          # reasonable starts
fn  = neg_ll_prof,
x   = x,
method = "L-BFGS-B",
lower = c(1e-6, 1e-6),          # enforce positivity
control = list(fnscale = 1),
hessian = TRUE
)
p_hat <- fit$par[["p"]]
d_hat <- fit$par[["d"]]
p_hat
d_hat
# recover a_hat from the closed form
a_hat <- ((p_hat * sum(x^p_hat)) / (n * d_hat))^(1 / p_hat)
a_hat
list(p_hat = p_hat, d_hat = d_hat, a_hat = a_hat,
logLik = -fit$value, convergence = fit$convergence)
library(MOutliers)
data <- mtcars[, c("mpg", "hp", "wt" )]
detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
plot_outliers(data,method = "mahalanobis",alpha = 0.975)
plot_outliers_pairwise(data,method = "mahalanobis",alpha = 0.975)
rlang::last_trace()
plot_outliers_pairwise(data,method = "mahalanobis",alpha = 0.975)
library(MOutliers)
data <- mtcars[, c("mpg", "hp", "wt" )]
detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
plot_outliers(data,method = "mahalanobis",alpha = 0.975)
plot_outliers_pairwise(data,method = "mahalanobis",alpha = 0.975)
library(MOutliers)
data <- mtcars[, c("mpg", "hp", "wt" )]
detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
plot_outliers(data,method = "mahalanobis",alpha = 0.975)
plot_outliers_pairwise(data,method = "mahalanobis",alpha = 0.975)
