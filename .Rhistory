plot_outliers_pairwise(data,method = "mahalanobis",alpha = 0.975)
rlang::last_trace()
plot_outliers_pairwise(data,method = "mahalanobis",alpha = 0.975)
library(MOutliers)
data <- mtcars[, c("mpg", "hp", "wt" )]
detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
plot_outliers(data,method = "mahalanobis",alpha = 0.975)
plot_outliers_pairwise(data,method = "mahalanobis",alpha = 0.975)
library(MOutliers)
data <- mtcars[, c("mpg", "hp", "wt" )]
detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
plot_outliers(data,method = "mahalanobis",alpha = 0.975)
plot_outliers_pairwise(data,method = "mahalanobis",alpha = 0.975)
# Step 0. a
library(usethis)
library(devtools)
library(roxygen2)
library(testthat)
library(MASS)
# Step 0. b
use_r("detect_multivariate_outliers")
use_r("mOutliers.R")    # rename the package
use_r("plot_outliers.R")
use_package("Rcpp",type="LinkingTo")
# Step 0. c
use_rcpp()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 0. a
library(usethis)
library(devtools)
library(roxygen2)
library(testthat)
library(MASS)
# Step 0. b
use_r("detect_multivariate_outliers")
use_r("mOutliers.R")    # rename the package
use_r("plot_outliers.R")
use_package("Rcpp",type="LinkingTo")
# Step 0. c
use_rcpp()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 2
Rcpp::compileAttributes()
# Step 3
devtools::load_all()
# Step 4
data <- mtcars[, c("mpg", "hp", "wt" )]
# Mahalanobis via C++
outlier_points <- detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
outlier_points
scat_plots <- plot_outliers(data,method = "mahalanobis",alpha = 0.975)
scat_plots <- plot_outliers(data,method = "mahalanobis",alpha = 0.975)
scat_plots
# Step 0. a
library(usethis)
library(devtools)
library(roxygen2)
library(testthat)
library(MASS)
# Step 0. b
use_r("detect_multivariate_outliers")
use_r("mOutliers.R")    # rename the package
use_r("plot_outliers.R")
use_package("Rcpp",type="LinkingTo")
# Step 0. c
use_rcpp()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 2
Rcpp::compileAttributes()
# Step 3
devtools::load_all()
# Step 4
data <- mtcars[, c("mpg", "hp", "wt" )]
# Mahalanobis via C++
outlier_points <- detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
outlier_points
scat_plots <- plot_outliers(data,method = "mahalanobis",alpha = 0.975)
scat_plots
plot_outliers(data,method = "mcd",alpha = 0.975)
# Step 4
data <- mtcars[, c("mpg", "wt" )]
# Mahalanobis via C++
outlier_points <- detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
outlier_points
plot_outliers(data,method = "mcd",alpha = 0.975)
head(mtcars)
# Step 4
data <- mtcars[, c("mpg", "hp", "wt","disp" )]
# Mahalanobis via C++
outlier_points <- detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
outlier_points
scat_plots <- plot_outliers(data,method = "mcd",alpha = 0.975)
scat_plots
plot_outliers(data,method = "mahalanobis",alpha = 0.975)
# Step 4
data <- mtcars[, c("mpg", "hp", "wt" )]
# Mahalanobis via C++
outlier_points <- detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
outlier_points
scat_plots <- plot_outliers(data,method = "mahalanobis",alpha = 0.975)
scat_plots
# Step 5 Check in exist in global env. We want this to be FALSE
exists("detect_multivariate_outliers", where = globalenv(), inherits = FALSE)
exists("plot_outliers", where = globalenv(), inherits = FALSE)
# Step 6. So far everything goes well. We can use check command
#         More extensive check if all piece work together
devtools::check()
# Step 6. So far everything goes well. We can use check command
#         More extensive check if all piece work together
devtools::check()
# Step 6. So far everything goes well. We can use check command
#         More extensive check if all piece work together
devtools::check()
# Step 6. So far everything goes well. We can use check command
#         More extensive check if all piece work together
devtools::check()
# Step 6. So far everything goes well. We can use check command
#         More extensive check if all piece work together
devtools::check()
devtools::document()
# STEP 7. Test documentation
?detect_multivariate_outliers
?plot_outliers
devtools::install()
# STEP 10. Adding some unit-tests
use_testthat()
# Formal you automatize this.
# Create a new R file in tests/testthat folder
# The name of this file must be: "test-helloworld.R
# Add the lines we used before and run command:
test()
data(diamonds)
library(dplyr)
data("diamonds")
# Diamond data
library(dplyr)
data("diamonds")
head(diamonds)
# Load and prepare data
data("airquality")
air <- airquality[c("Ozone", "Temp")]
air <- na.omit(air)
air
# Diamond data
library(dplyr)
data("diamonds")
library(ggplot2)
# now diamonds is available
data("diamonds", package = "ggplot2")
head(diamonds)
# Load and prepare data
data("airquality")
airquality
air <- airquality[c("Ozone", "Temp")]
air <- na.omit(air)
air
airquality
air <- na.omit(airquality)
air
library(MOutliers)
detect_multivariate_outliers(air, method = "mahalanobis", alpha = 0.975)
plot_outliers(air,method = "mahalanobis",alpha = 0.975)
# Load and prepare data
data("airquality")
air <- airquality[c("Ozone", "Temp","wind")]
air <- na.omit(airquality)
air
air <- na.omit(air)
air
# Load and prepare data
data("airquality")
air <- airquality[c("Ozone", "Temp","wind")]
air <- na.omit(air)
air
# Load and prepare data
data("airquality")
air <- airquality[c("Ozone", "Temp","wind")]
air <- na.omit(air)
air
# Load and prepare data
data("airquality")
air <- airquality[c("Ozone", "Temp","Wind")]
air <- na.omit(air)
air
library(MOutliers)
detect_multivariate_outliers(air, method = "mahalanobis", alpha = 0.975)
plot_outliers(air,method = "mahalanobis",alpha = 0.975)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::opts_chunk$set(echo = FALSE)
library(mgcv)
library(MOutliers)
library(usethis)
library(testthat)
use_testthat()
set.seed(123)
df <- data.frame(
x = c(rnorm(50), 5),
y = c(rnorm(50), 5)
)
head(df)
# Mahalanobis Distance
result_mahal <- detect_multivariate_outliers(df, method = "mahalanobis"
, alpha = 0.975)
head(result_mahal)
# Minimum Covariance Determinant (MCD)
result_mcd <- detect_multivariate_outliers(df, method = "mcd"
, alpha = 0.975)
head(result_mcd)
# Principal Component Analysis (PCA)
result_pca <- detect_multivariate_outliers(df, method = "pca"
, alpha = 0.975)
head(result_pca)
df_mtcars <- mtcars[, c("mpg", "hp", "wt" )]
head(df_mtcars)
# Mahalanobis Distance
result_mahal <- detect_multivariate_outliers(df_mtcars,
method = "mahalanobis")
head(result_mahal)
# Minimum Covariance Determinant (MCD)
result_mcd <- detect_multivariate_outliers(df_mtcars, method = "mcd")
head(result_mcd)
# Principal Component Analysis (PCA)
result_pca <- detect_multivariate_outliers(df_mtcars, method = "pca")
head(result_pca)
# Mahalanobis Distance
plot_outliers(df, method = "mahalanobis", alpha = 0.975)
# Minimum Covariance Determinant (MCD)
result_mcd <- detect_multivariate_outliers(df_mtcars, method = "mcd")
head(result_mcd)
# Principal Component Analysis (PCA)
result_pca <- detect_multivariate_outliers(df_mtcars, method = "pca")
head(result_pca)
# Mahalanobis Distance
plot_outliers(df, method = "mahalanobis", alpha = 0.975)
# Minimum Covariance Determinant (MCD)
plot_outliers(df, method = "mcd", alpha = 0.975)
# Mahalanobis Distance
plot_outliers(df_mtcars, method = "mahalanobis", alpha = 0.975)
# Minimum Covariance Determinant (MCD)
plot_outliers(df_mtcars, method = "mcd", alpha = 0.975)
# Install devtools if not already installed
install.packages("devtools")
# Install the MOutliers package from GitHub (with tests)
devtools::install_github(
"SenuYasara/Multivariate_Outlier_Detection_R_Package",
INSTALL_opts = "--install-tests"
)
test_that("detect_multivariate_outliers rejects non-numeric data", {
df <- data.frame(x = 1:5, y = letters[1:5])
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"must be numeric"
)
})
test_that("detect_multivariate_outliers rejects datasets with NA values", {
df <- data.frame(x = rnorm(10), y = rnorm(10))
df[1, 1] <- NA
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"missing values"
)
})
test_that("detect_multivariate_outliers works with mahalanobis method", {
set.seed(123)
df <- data.frame(x = rnorm(50), y = rnorm(50))
result <- detect_multivariate_outliers(df, method = "mahalanobis")
expect_s3_class(result, "data.frame")
expect_true(all(c("Distance", "Outlier") %in% names(result)))
expect_equal(nrow(result), nrow(df))
})
test_that("detect_multivariate_outliers works with mahalanobis method", {
set.seed(123)
df <- data.frame(x = rnorm(50), y = rnorm(50))
result <- detect_multivariate_outliers(df, method = "mahalanobis")
expect_s3_class(result, "data.frame")
expect_true(all(c("Distance", "Outlier") %in% names(result)))
expect_equal(nrow(result), nrow(df))
})
test_that("detect_multivariate_outliers works with mcd method", {
set.seed(123)
df <- data.frame(x = rnorm(30), y = rnorm(30))
result <- detect_multivariate_outliers(df, method = "mcd")
expect_s3_class(result, "data.frame")
expect_equal(nrow(result), nrow(df))
})
test_that("detect_multivariate_outliers works with pca method", {
set.seed(123)
df <- data.frame(x = rnorm(40), y = rnorm(40), z = rnorm(40))
result <- detect_multivariate_outliers(df, method = "pca")
expect_s3_class(result, "data.frame")
expect_equal(nrow(result), nrow(df))
})
test_that("detect_multivariate_outliers throws error for invalid method", {
df <- data.frame(x = rnorm(10), y = rnorm(10))
expect_error(detect_multivariate_outliers(df, method = "invalid")
, "Invalid method")
})
test_that("detect_multivariate_outliers errors with singular covariance matrix",
{
df <- data.frame(x = rnorm(20), y = rnorm(20))
df$dup <- df$x + 2 * df$y
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"Covariance matrix is singular"
)
})
rlang::last_trace()
rlang::last_trace()
test_that("plot_outliers errors with non-numeric data", {
df <- data.frame(x = 1:5, y = letters[1:5])
expect_error(
plot_outliers(df, method = "mahalanobis"),
"must be numeric"
)
})
test_that("plot_outliers errors with missing values", {
df <- data.frame(x = c(1, 2, NA, 4), y = c(5, 6, 7, 8))
expect_error(
plot_outliers(df, method = "mcd"),
"cannot contain missing values"
)
})
test_that("plot_outliers requires at least two columns", {
df <- data.frame(x = rnorm(10))
expect_error(
plot_outliers(df, method = "mahalanobis"),
"Need at least two numeric columns")
})
test_that("plot_outliers runs with 2 variables (mahalanobis & mcd)", {
skip_if_not_installed("ggplot2")
skip_if_not_installed("gridExtra")
skip_if_not_installed("cowplot")
set.seed(123)
df <- data.frame(x = rnorm(20), y = rnorm(20))
expect_silent(plot_outliers(df, method = "mahalanobis", alpha = 0.975))
expect_silent(plot_outliers(df, method = "mcd", alpha = 0.975))
})
test_that("plot_outliers runs with >2 variables", {
skip_if_not_installed("ggplot2")
skip_if_not_installed("gridExtra")
skip_if_not_installed("cowplot")
set.seed(456)
df <- data.frame(
x = rnorm(15),
y = rnorm(15),
z = rnorm(15)
)
expect_silent(plot_outliers(df, method = "mahalanobis"))
expect_silent(plot_outliers(df, method = "mcd"))
})
test_that("plot_outliers flags at least one outlier when data includes an extreme point", {
skip_if_not_installed("ggplot2")
skip_if_not_installed("gridExtra")
skip_if_not_installed("cowplot")
df <- data.frame(
x = c(rnorm(19), 10),
y = c(rnorm(19), 10),
z = c(rnorm(19), 10)
)
expect_silent(
p <- plot_outliers(df, method = "mahalanobis", alpha = 0.975)
)
expect_true(inherits(p, "gtable") || inherits(p, "grob"))
})
test_that("plot_outliers errors with invalid method", {
df <- data.frame(x = rnorm(10), y = rnorm(10))
expect_error(
plot_outliers(df, method = "invalid"),
"'arg' should be one of"
)
})
library(testthat)
test_that("detect_multivariate_outliers errors with singular covariance matrix",
{
df <- data.frame(x = rnorm(20), y = rnorm(20))
df$dup <- df$x + 2 * df$y
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"Covariance matrix is singular"
)
})
library(testthat)
test_that("detect_multivariate_outliers errors with singular covariance matrix",
{
df <- data.frame(x = rnorm(20), y = rnorm(20))
df$dup <- df$x + 2 * df$y
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"Covariance matrix is singular"
)
})
library(testthat)
test_that("detect_multivariate_outliers errors with singular covariance matrix",
{
df <- data.frame(x = rnorm(20), y = rnorm(20))
df$dup <- df$x + 2 * df$y
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"Covariance matrix is singular"
)
})
test_that("detect_multivariate_outliers errors with singular covariance matrix", {
df <- data.frame(x = rnorm(20), y = rnorm(20))
df$dup <- df$x + 2 * df$y
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"Covariance matrix is singular"
)
})
test_that("detect_multivariate_outliers errors with singular covariance matrix", {
df <- data.frame(x = rnorm(20), y = rnorm(20))
df$dup <- df$x + 2 * df$y
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"Covariance matrix is singular"
)
})
library(usethis)
library(devtools)
library(roxygen2)
library(testthat)
library(MASS)
use_package("Rcpp",type="LinkingTo")
# Step 0. c
use_rcpp()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 2
Rcpp::compileAttributes()
# Step 3
devtools::load_all()
# Step 4
data <- mtcars[, c("mpg", "hp", "wt" )]
# Mahalanobis via C++
outlier_points <- detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
outlier_points
scat_plots <- plot_outliers(data,method = "mahalanobis",alpha = 0.975)
scat_plots
# Step 5 Check in exist in global env. We want this to be FALSE
exists("detect_multivariate_outliers", where = globalenv(), inherits = FALSE)
exists("plot_outliers", where = globalenv(), inherits = FALSE)
# Step 6. So far everything goes well. We can use check command
#         More extensive check if all piece work together
devtools::check()
# STEP 7. Test documentation
?detect_multivariate_outliers
?plot_outliers
devtools::install()
test_that("detect_multivariate_outliers errors with singular covariance matrix", {
df <- data.frame(x = rnorm(20), y = rnorm(20))
df$dup <- df$x + 2 * df$y
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"Covariance matrix is singular"
)
})
devtools::build_readme()
# Step 6. So far everything goes well. We can use check command
#         More extensive check if all piece work together
devtools::check()
devtools::document()
# STEP 7. Test documentation
?detect_multivariate_outliers
?plot_outliers
devtools::install()
# STEP 9
##############################
# open a new session and test
############################
library(MOutliers)
data <- mtcars[, c("mpg", "hp", "wt" )]
detect_multivariate_outliers(data, method = "mahalanobis", alpha = 0.975)
plot_outliers(data,method = "mahalanobis",alpha = 0.975)
# STEP 10. Adding some unit-tests
use_testthat()
# Formal you automatize this.
# Create a new R file in tests/testthat folder
# The name of this file must be: "test-helloworld.R
# Add the lines we used before and run command:
test()
devtools::build_readme()
test_that("detect_multivariate_outliers errors with singular covariance matrix", {
set.seed(123)
df <- data.frame(x = rnorm(20), y = rnorm(20))
df$dup <- df$x + 2 * df$y  # Linear dependency makes covariance singular
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"Covariance matrix is singular"
)
})
test_that("detect_multivariate_outliers errors with singular covariance matrix", {
set.seed(123)
df <- data.frame(x = rnorm(20), y = rnorm(20))
df$dup <- df$x + 2 * df$y  # Linear dependency makes covariance singular
expect_error(
detect_multivariate_outliers(df, method = "mahalanobis"),
"Covariance matrix is singular"
)
})
library(MOutliers)
